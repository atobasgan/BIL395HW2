{\rtf1\ansi\ansicpg1254\cocoartf2821
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 ;; Ortam (de\uc0\u287 i\u351 ken tablosu)\
(define env (make-hash-table))\
\
;; Hesaplama fonksiyonu\
(define (calc expr)\
  (cond\
    [(number? expr) expr]\
    [(symbol? expr)\
     (hash-ref env expr (lambda ()\
                          (if (eq? expr 'vars)\
                              (begin\
                                (for-each\
                                 (lambda (k)\
                                   (display k) (display " = ")\
                                   (display (hash-ref env k)) (newline))\
                                 (hash-table-keys env))\
                                "Printed variables")\
                              (error "Undefined variable"))))]\
    [(list? expr)\
     (let ([op (car expr)]\
           [args (cdr expr)])\
       (cond\
         [(eq? op 'define)\
          (let ([var (car args)]\
                [val (cadr args)])\
            (hash-set! env var (calc val))\
            (string-append "Defined " (symbol->string var)))]\
         [(= (length args) 2)\
          (let* ([v1 (calc (car args))]\
                 [v2 (calc (cadr args))])\
            (cond\
              [(eq? op '+) (+ v1 v2)]\
              [(eq? op '-) (- v1 v2)]\
              [(eq? op '*) (* v1 v2)]\
              [(eq? op '/) (if (= v2 0)\
                               (error "Division by zero")\
                               (/ v1 v2))]\
              [(eq? op 'mod) (modulo v1 v2)]\
              [(eq? op 'power) (expt v1 v2)]\
              [else (error "Unknown operator")]))]\
         [else (error "Invalid expression")]))]\
    [else (error "Unknown expression format")]))\
\
;; REPL d\'f6ng\'fcs\'fc\
(define (repl)\
  (display ">>> ")\
  (let ([input (read)])\
    (if (equal? input 'exit)\
        (begin (display "Goodbye!\\n") (exit 0))\
        (begin\
          (catch #t\
            (lambda ()\
              (let ([result (calc input)])\
                (display result)\
                (newline)))\
            (lambda (key . args)\
              (display "Error: ")\
              (display (car args))\
              (newline)))\
          (repl)))))\
\
;; Ba\uc0\u351 lat\
(repl)\
}