;; Ortam (değişken tablosu)
(define env (make-hash-table))

;; Hesaplama fonksiyonu
(define (calc expr)
  (cond
    [(number? expr) expr]
    [(symbol? expr)
     (hash-ref env expr
               (lambda ()
                 (if (eq? expr 'vars)
                     (begin
                       (for-each
                        (lambda (k)
                          (display k) (display " = ")
                          (display (hash-ref env k)) (newline))
                        (hash-table-keys env))
                       "Printed variables")
                     (error "Undefined variable"))))]
    [(list? expr)
     (let ([op (car expr)]
           [args (cdr expr)])
       (cond
         [(eq? op 'define)
          (let ([var (car args)]
                [val (cadr args)])
            (hash-set! env var (calc val))
            (string-append "Defined " (symbol->string var)))]
         [(= (length args) 2)
          (let* ([v1 (calc (car args))]
                 [v2 (calc (cadr args))])
            (cond
              [(eq? op '+) (+ v1 v2)]
              [(eq? op '-) (- v1 v2)]
              [(eq? op '*) (* v1 v2)]
              [(eq? op '/) (if (= v2 0)
                               (error "Division by zero")
                               (/ v1 v2))]
              [(eq? op 'mod) (modulo v1 v2)]
              [(eq? op 'power) (expt v1 v2)]
              [else (error "Unknown operator")]))]
         [else (error "Invalid expression")]))]
    [else (error "Unknown expression format")]))

;; REPL döngüsü
(define (repl)
  (display ">>> ")
  (let ([input (read)])
    (if (equal? input 'exit)
        (begin (display "Goodbye!\n") (exit 0))
        (begin
          (catch #t
            (lambda ()
              (let ([result (calc input)])
                (display result)
                (newline)))
            (lambda (key . args)
              (display "Error: ")
              (display (car args))
              (newline)))
          (repl)))))

;; Başlat
(repl)
